import org.apache.tools.ant.filters.*
import java.text.SimpleDateFormat

// Gradle Build script for 18xx Rails program (rails.sf.net)
apply plugin: 'java'
sourceCompatibility = 1.6
targetCompatibility = 1.6

// Addition of shadow plugin to create one jars
// reference: https://github.com/johnrengelman/shadow
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
    }
}

apply plugin: 'shadow'
// exclude the signatures
shadow {
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
}

// Addition of JavaProfile plugin to read Java property files
// reference: https://github.com/unsaved/gradle-javaPropFile-plugin

buildscript {
    repositories { jcenter() }  // Before plugin v. 1.0.0 use mavenCentral()
    dependencies {
        classpath 'com.admc:gradle-javaPropFile-plugin:1.0.0'
        // For strictly repeatable builds, replace 'latest.integration'
        // with the latest literal GA version label.
    }
}
apply plugin: 'com.admc.javaPropFile'
        
// Addition of launch4j gradle plugin
// refer to https://github.com/TheBoegl/gradle-launch4j

//buildscript {
//  repositories {
//    maven {
//      url "https://plugins.gradle.org/m2/"
//    }
//  }
//  dependencies {
//    classpath "gradle.plugin.edu.sc.seis.gradle:launch4j:1.1.3"
//  }
// }

// apply plugin: "edu.sc.seis.launch4j"

        
// Rails variables
def railsCodebase = 'rails.sourceforge.net'
def railsAppName = 'Rails 18xx moderator'
def railsAppVendor = 'Rails project'
def railsAppDescr = 'Rails is a moderator program for 18xx games'
def railsMainClass = 'net.sf.rails.util.RunGame'

// Key variables
def keyAlias = 'rails18xx'
// def keyAlias = 'stefanfrey'

// Build directories
def webstartBuildDir = "${buildDir}/webstart/build"
def webstartDestDir = "${buildDir}/webstart/signed"
def keystoreFile = '../../keystore/rails.keys'
def buildFilesDir = 'src/main/resources/build'
def resourceFilesDir = 'src/main/resources'
def versionFile = "version.number"

// Sourceforge variables
def sourceforgeJnlpPath = "http://${railsCodebase}/webstart"
def sourceforgeUploadPath = 'web.sourceforge.net/home/project-web/rails/htdocs/webstart'
def sourceforgeJnlpFileName = 'rails.jnlp'
def sourceforgeUserName = 'stefanfrey'

// use version number from property file
propFileLoader.load(file("${buildFilesDir}/${versionFile}"))


dependencies {
  compile fileTree(dir: 'libs/main', include: "**/*.jar")
  testCompile fileTree(dir: 'libs/test', include: "**/*.jar")
}

jar {
	def manifestClasspath = configurations.runtime.collect{ './' + it.getName() }.join(' ')
    manifest {
        attributes 'Class-Path': manifestClasspath, 'Main-Class': "${railsMainClass}"
    }
} 

// BuildDate function adapted from http://stackoverflow.com/questions/19172565/how-append-date-build-to-versionnamesuffix-on-gradle
def buildDate() {
       def df = new SimpleDateFormat("yyyy-MM-dd")
       df.setTimeZone(TimeZone.getTimeZone("UTC"))
       return df.format(new Date())
}

// Update tokens in version.number file
task makeBuildVersion(type: Copy) {
	from "${buildFilesDir}/${versionFile}"
	into resourceFilesDir
	
	filter(ReplaceTokens, tokens: [DEVELOP:'', BUILDDATE:buildDate()]) 
}

// Update tokens in version.number file
task makeDevelopVersion(type: Copy) {
	from "${buildFilesDir}/${versionFile}"
	into resourceFilesDir
}

// The following implements a creation of a Webstart version
// refer to http://www.apprenticeshipnotes.org/2013/01/generating-webstart-files-using-gradle.html
// and http://java.dzone.com/articles/java-web-start-jnlp-hello

task createBuildDir << {
    def dir = new File("${webstartBuildDir}")
    if (!dir.exists()) {
      dir.mkdirs()
    }
}

task (copyJarFiles, type:Copy, dependsOn:[jar, createBuildDir]) {
//	the next line is required if we have several jars
    from configurations.runtime
    from("${buildDir}/libs")
    into("${webstartBuildDir}")
    include('*.jar')
}

task (updateManifest, dependsOn: copyJarFiles) << {
    def buildFiles = fileTree(dir: "${webstartBuildDir}", include:"**/*.jar")
    buildFiles.each {
      ant.jar(destfile: it, update: true) {
	delegate.manifest {
	  attribute(name: "Permissions", value: "all-permissions")
	  attribute(name: "Codebase", value: "${railsCodebase}")
	  attribute(name: "Application-Name", value: "${railsAppName}") 
	  attribute(name: "Trusted-Only", value: "true")
	}
      }
    }
}

task (signAll, dependsOn: updateManifest) << {
    def libFiles = fileTree(dir: "${webstartBuildDir}", include:"**/*.jar")
    libFiles.each {
        ant.signjar(
                alias: "${keyAlias}",
                jar: it,
		keystore: "${keystoreFile}",
		storepass: "rails18xx",
                preservelastmodified: "true",
		lazy: "true")
    }
}

task createWebStartDir << {
    def dir = new File("${webstartDestDir}")
    if (!dir.exists()) {
      dir.mkdirs()
    }
}

task(copyWebstartFiles, type:Copy, dependsOn: [createWebStartDir, signAll]) {
    from("${webstartBuildDir}")
    into("${webstartDestDir}")
    include('*.jar')
}

task generateWebstart(dependsOn: copyWebstartFiles) << {
    File jnlpTemplateFile = new File("${buildFilesDir}/template.jnlp")
    def root = new XmlParser().parse(jnlpTemplateFile)
    def jnlpFileName = "${sourceforgeJnlpFileName}"
    
    // Setting values in the jnlp template
    // Setting root values
    
    // Http CodeBase
    root.@codebase = sourceforgeJnlpPath
    root.@href = jnlpFileName

    // Setting information values
    def information = root.information[0]
    def title = information.title[0]
    def vendor = information.vendor[0]
    title.setValue("${railsAppName}")
    vendor.setValue("${railsAppVendor}")
    def descriptionList = information.description
    descriptionList.each {
        it.setValue("${railsAppDescr}")
    }
    
    // Setting resources
    def resource = root.resources[0]
    def j2se = resource.j2se[0]
    j2se.@version = "1.6+"
    
    def collection = fileTree(dir:"${webstartBuildDir}", include:"**/*.jar")
    def mainJar = 'rails.jar'

    collection.each {
        def resourceValues = [href: it.name]
        if (mainJar == it.name) {
            resourceValues = [href: it.name, main: 'true']
        }
        resource.appendNode('jar', resourceValues)
    }
    
    // Setting the main class
    def applicationDesc = root.'application-desc'[0]
    applicationDesc.'@main-class' = "$railsMainClass"
    
    // Writing the jnlp file filled
    File jnlpFile = new File("${webstartDestDir}/" + jnlpFileName)
    new XmlNodePrinter(new PrintWriter(jnlpFile)).print(root)
}

// upload via ant task
task uploadWebstart(dependsOn: generateWebstart) << {
  ant.scp(todir:"${sourceforgeUserName}:${sfpwd}@${sourceforgeUploadPath}") {
    fileset(dir:"${webstartDestDir}")
  }
}


task cleanWebstart (type:Delete, dependsOn:clean) {
  delete "${webstartBuildDir}", "${webstartDestDir}"
}

// launch4j {
//    mainClassName = "${railsMainClass}"
//}	
        
